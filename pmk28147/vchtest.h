using namespace OpenCL;

// Set test key 1 - KZU-1
byte kzu[5][KL] =	{{	0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0xff, 0xff, 0xff, 0xff,
					0xff, 0xff, 0xff, 0xff,
					0xff, 0xff, 0xff, 0xff,
					0xff, 0xff, 0xff, 0xff },

// Set test key 2 - KZU-2
				{	0xff, 0xff, 0xff, 0xff,
					0xff, 0xff, 0xff, 0xff,
					0xff, 0xff, 0xff, 0xff,
					0xff, 0xff, 0xff, 0xff,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 },
				
// Set test key 3 - KZU-3	
				{	0x55, 0x55, 0x55, 0x55,
					0xaa, 0xaa, 0xaa, 0xaa,
					0x55, 0x55, 0x55, 0x55,
					0xaa, 0xaa, 0xaa, 0xaa,
					0x55, 0x55, 0x55, 0x55,
					0xaa, 0xaa, 0xaa, 0xaa,
					0x55, 0x55, 0x55, 0x55,
					0xaa, 0xaa, 0xaa, 0xaa },

// Set test key 4 - KZU-4	
// byte kzu4[KL] = 
				{	0xaa, 0xaa, 0xaa, 0xaa,
					0x55, 0x55, 0x55, 0x55,
					0xaa, 0xaa, 0xaa, 0xaa,
					0x55, 0x55, 0x55, 0x55,
					0xaa, 0xaa, 0xaa, 0xaa,
					0x55, 0x55, 0x55, 0x55,
					0xaa, 0xaa, 0xaa, 0xaa, 
					0x55, 0x55, 0x55, 0x55 },

// Set test key 5 - KZU-5
// Attention! In reverse order! Low-endian

{	0x04, 0x75, 0xf6, 0xe0,
					0x50, 0x38, 0xfb, 0xfa,
					0xd2, 0xc7, 0xc3, 0x90,
					0xed, 0xb3, 0xca, 0x3d,
					0x15, 0x47, 0x12, 0x42,
					0x91, 0xae, 0x1e, 0x8a,
					0x2f, 0x79, 0xcd, 0x9e,
					0xd2, 0xbc, 0xef, 0xbd }};

// Set open data To-1
// Attention! In reverse order! Low-endian
byte to1[2][BS] = {	{0xcc, 0xcc, 0xcc, 0xcc,
						0x33, 0x33, 0x33, 0x33},
						{0x33, 0x33, 0x33, 0x33,
						0xcc, 0xcc, 0xcc, 0xcc} };				
		
// Set open data To-2
// Attention! In reverse order! Low-endian
// see gmodes.cpp
byte to2[32][BS];

// Init vector
// Attention! In reverse order! Low-endian
byte s1[BS]	 = {	0x2a, 0x80, 0xa7, 0xc3,
					0xff, 0xa8, 0xe3, 0x47 };

byte s2[BS]  = {	0x73, 0xcf, 0x64, 0xe6,
					0x7d, 0x4b, 0x42, 0xe6 };	

